name: Continuous Deployment

on: push

jobs:
    prettier:
        name: Prettier
        strategy:
            matrix:
                directory: [backend, frontend]
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ matrix.directory }}
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: 18
            - name: Install dependencies
              run: npm ci
            - name: Run prettier
              run: npm run prettier

    build:
        name: Build
        strategy:
            matrix:
                directory: [backend, frontend]
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ matrix.directory }}
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: 18
            - name: Install dependencies
              run: npm ci
            - name: Build
              run: npm run build

    end-2-end-test:
        name: End-to-End Test
        timeout-minutes: 60
        runs-on: ubuntu-latest
        permissions:
            checks: write
        env:
            JWKS_URL: ${{ vars.JWKS_URL }}
            VITE_AUTH0_DOMAIN: ${{ vars.VITE_AUTH0_DOMAIN }}
            VITE_AUTH0_CLIENT_ID: ${{ vars.VITE_AUTH0_CLIENT_ID }}
            VITE_AUTH0_API_AUDIENCE: ${{ vars.VITE_AUTH0_API_AUDIENCE }}
            TEST_USERNAME: ${{ vars.TEST_USERNAME }}
            TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: 18
            - name: Get installed Playwright version
              id: playwright-version
              run: echo "playwright_version=$(jq -r .devDependencies.\"@playwright/test\" package.json)" >> $GITHUB_OUTPUT
            - name: Cache Playwright binaries
              uses: actions/cache@v3
              id: playwright-cache
              with:
                  path: ~/.cache/ms-playwright
                  key: $RUNNER_OS-playwright-${{ steps.playwright-version.outputs.playwright_version }}
            - name: Install dependencies
              run: |
                  npm ci &&
                  (cd backend && npm ci) &&
                  (cd frontend && npm ci)
            - name: Setup DB
              working-directory: backend
              run: |
                  npm run dbpush &&
                  npm run dbseed
            - name: Install Playwright browsers
              run: npm run install-browsers
              if: steps.playwright-cache.outputs.cache-hit != 'true'
            - name: Run Playwright tests
              run: npm run test
            - name: Test Report
              uses: dorny/test-reporter@v1
              if: success() || failure()
              with:
                  name: Test Report
                  path: test-results/junit.xml
                  reporter: java-junit

    prod-deploy:
        name: Production Deploy
        needs:
            - prettier
            - build
            - end-2-end-test
        environment:
            name: production
            url: https://partchat.h4ctar.com
        env:
            DEPLOY_USER: ${{ vars.DEPLOY_USER }}
            DEPLOY_HOST: ${{ vars.DEPLOY_HOST }}
            DEPLOY_KEY_VALUE: ${{ secrets.DEPLOY_KEY_VALUE }}
            DEPLOY_KEY: ./github.key
            SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
            JWKS_URL: ${{ vars.JWKS_URL }}
            VITE_AUTH0_DOMAIN: ${{ vars.VITE_AUTH0_DOMAIN }}
            VITE_AUTH0_CLIENT_ID: ${{ vars.VITE_AUTH0_CLIENT_ID }}
            VITE_AUTH0_API_AUDIENCE: ${{ vars.VITE_AUTH0_API_AUDIENCE }}
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Install pm2
              run: npm install --global pm2@latest
            - name: Setup SSH
              run: |
                  mkdir -p ~/.ssh/ &&
                  echo $DEPLOY_KEY_VALUE > $DEPLOY_KEY &&
                  chmod 600 $DEPLOY_KEY &&
                  echo $SSH_KNOWN_HOSTS > ~/.ssh/known_hosts &&
                  chmod 600 ~/.ssh/known_hosts
            - name: Deploy to production
              run: pm2 deploy production --force
